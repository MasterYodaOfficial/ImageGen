from datetime import datetime
from sqlalchemy import Float, distinct, select, func
from aiogram.types import Message
from bot.database.session import get_session
from bot.database.crud.crud_user import is_admin
from bot.logger import logger
from bot.database.models import User, Tariff, Referral, Payment, ImageGeneration, GenerationModel



async def admin_details_command(message: Message):
    logger.info(f"{message.from_user.id} {message.from_user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏")
    if not await is_admin(message.from_user):
        return

    await message.answer("–§–æ—Ä–º–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç...")

    now = datetime.utcnow()
    start_of_month = datetime(now.year, now.month, 1)
    month_name = now.strftime('%B %Y')

    async with get_session() as session:
        # 1. –ü–ª–∞—Ç–µ–∂–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        tariffs_stats = await session.execute(
            select(
                Tariff.title,
                func.count(Payment.id),
                func.sum(Payment.amount)
            )
            .join(Payment.tariff)
            .where(
                Payment.created_at >= start_of_month,
                Payment.status == "paid"
            )
            .group_by(Tariff.title)
            .order_by(func.sum(Payment.amount).desc())
        )

        # 2. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        models_stats = await session.execute(
            select(
                GenerationModel.name,
                func.count(ImageGeneration.id),
                func.sum(GenerationModel.token_cost)
            )
            .join(ImageGeneration.model)
            .where(ImageGeneration.created_at >= start_of_month)
            .group_by(GenerationModel.name)
            .order_by(func.count(ImageGeneration.id).desc())
        )

        # 3. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        new_referrals = await session.scalar(
            select(func.count(User.id))
            .where(
                User.join_date >= start_of_month,
                User.invited_by_code.is_not(None)
            )
        )

        referral_bonuses = await session.scalar(
            select(func.sum(Referral.reward_amount_tokens))
            .where(Referral.created_at >= start_of_month)
        ) or 0

        # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        active_users = await session.scalar(
            select(func.count(distinct(ImageGeneration.user_id)))
            .where(ImageGeneration.created_at >= start_of_month)
        )

        avg_gens_per_user = await session.scalar(
            select(func.cast(func.count(ImageGeneration.id), Float) /
                   func.nullif(func.count(distinct(ImageGeneration.user_id)), 0))
            .where(ImageGeneration.created_at >= start_of_month)
        ) or 0

        top_generators = await session.execute(
            select(
                User.username,
                func.count(ImageGeneration.id).label('total_gens')
            )
            .join(ImageGeneration.user)
            .where(ImageGeneration.created_at >= start_of_month)
            .group_by(User.username)
            .order_by(func.count(ImageGeneration.id).desc())
            .limit(3)
        )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    report = f"<b>üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê {month_name}</b>\n\n"

    # –†–∞–∑–¥–µ–ª –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
    report += "<b>üí∞ –ü–õ–ê–¢–ï–ñ–ò –ò –¢–ê–†–ò–§–´:</b>\n"
    total_payments = 0
    total_tariffs = 0
    for title, count, amount in tariffs_stats:
        total_payments += amount or 0
        total_tariffs += count or 0
        report += f"‚ñ™ {title}: {count} –ø–æ–∫—É–ø–æ–∫ –Ω–∞ {amount}‚ÇΩ\n"
    report += (f"‚îú –í—Å–µ–≥–æ: {total_tariffs} –ø–ª–∞—Ç–µ–∂–µ–π\n"
               f"‚îî –°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {total_payments}‚ÇΩ\n\n")

    # –†–∞–∑–¥–µ–ª –ø–æ –º–æ–¥–µ–ª—è–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    report += "<b>üñº –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–û –ú–û–î–ï–õ–Ø–ú:</b>\n"
    total_gens = 0
    total_tokens = 0
    for model, count, tokens in models_stats:
        total_gens += count or 0
        total_tokens += tokens or 0
        report += f"‚ñ™ {model}: {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ({tokens} —Ç–æ–∫–µ–Ω–æ–≤)\n"
    report += (f"‚îú –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total_gens}\n"
               f"‚îî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}\n\n")

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    report += "<b>üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê:</b>\n"
    report += f"‚ñ™ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_referrals}\n"
    report += f"‚ñ™ –í—ã–¥–∞–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {referral_bonuses}\n\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    report += "<b>üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:</b>\n"
    report += f"‚ñ™ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
    report += f"‚ñ™ –°—Ä–µ–¥–Ω–µ–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_gens_per_user:.1f}\n"

    # –¢–æ–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    report += "\n<b>üèÜ –¢–û–ü-3 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –ì–ï–ù–ï–†–ê–¶–ò–Ø–ú:</b>\n"
    for i, (username, gens) in enumerate(top_generators, 1):
        report += f"{i}. {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}: {gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"

    await message.answer(report)